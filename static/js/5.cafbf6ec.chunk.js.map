{"version":3,"sources":["common/FormsControl/FormControl.module.css","common/FormsControl/FormsControl.tsx","utils/validators/validators.ts","HOC/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsForm/DialogsForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","FormControl","meta","children","hasError","error","touched","className","s","formControl","Textarea","props","input","restProps","Input","required","value","undefined","maxLengthCreator","maxLength","length","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","to","Dialog","id","name","path","dialog","active","Message","message","maxLength10","DialogsReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","component","placeholder","validate","Dialogs","dialogs","messages","addMessage","dialogsElements","map","d","messagesElements","m","dialogItems","values","newMessageBody","compose","dialogsPage","dispatch","addMessageAC"],"mappings":"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","file":"static/js/5.cafbf6ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__2cVvM\",\"error\":\"FormControl_error__3aqj1\",\"formSummaryError\":\"FormControl_formSummaryError__h13sV\"};","import React from 'react';\nimport s from './FormControl.module.css'\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\n\ntype PropsType = {\n    meta: WrappedFieldMetaProps\n}\nconst FormControl: React.FC<PropsType> = ({ meta, children}) => {\n    const hasError = meta.error && meta.touched\n\n    return (\n        <div className={s.formControl + ' ' +(hasError ? s.error : '')}>\n            {children}\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n\n    return (\n\n        <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n\n    )\n}\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n\n    return (\n        <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n    )\n}","export  type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    return value ? undefined : 'Field is required'\n\n}\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    return value.length > maxLength\n        ? `Max length must be less ${maxLength} symbols`\n        : undefined\n}","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux-store\";\n\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {}\ntype OwnProps = {}\n\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType  => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: MapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n            if(!isAuth) return <Redirect to='/login'/>\n            return <Component {...restProps as T} />\n\n    }\n\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, MapDispatchPropsType, OwnProps, AppStateType>\n    (mapStateToPropsForRedirect, {})(RedirectComponent)\n\n    return ConnectedAuthRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogItems\":\"Dialogs_dialogItems__3flRc\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__1323i\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Dialog.module.css';\r\n\r\n\r\ntype PropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst Dialog: React.FC <PropsType> = ({id, name}) => {\r\n    let path = '/dialogs/' + id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport s from './Message.module.css';\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nconst Message: React.FC <MessagePropsType> = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../../common/FormsControl/FormsControl\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\n\ntype DialogsFormValuesType = {\n    newMessageBody: string\n}\ntype DialogsFormOwnProps = {\n\n}\nconst maxLength10 = maxLengthCreator(10)\nconst DialogsForm: React.FC<InjectedFormProps<DialogsFormValuesType, DialogsFormOwnProps> & DialogsFormOwnProps> = ({handleSubmit}) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field component={Textarea} name={'newMessageBody'}\n                       placeholder={'Enter your message'}\n                       validate={[required, maxLength10]}\n                />\n            </div>\n            <div>\n                <button>Send message</button>\n            </div>\n        </form>\n    )\n}\nexport const DialogsReduxForm = reduxForm<DialogsFormValuesType>({form: 'dialogs'})(DialogsForm)\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Dialog from './Dialog/Dialog';\r\nimport Message from './Message/Message';\r\nimport {DialogsType, MessagesType} from '../../redux/dialogs-reducer';\r\nimport {DialogsReduxForm} from './DialogsForm/DialogsForm';\r\n\r\n\r\ntype PropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMessageBody: string\r\n    addMessage: (newMessageBody: string) => void\r\n    updateNewMessageBody: (body: string) => void\r\n    isAuth: boolean\r\n}\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    const {\r\n        dialogs,\r\n        messages,\r\n        addMessage,\r\n    } = props\r\n\r\n    const addNewMessage = (values: { newMessageBody: string }) => {\r\n        addMessage(values.newMessageBody)\r\n        values.newMessageBody = ''\r\n    }\r\n    let dialogsElements = dialogs.map(d => <Dialog key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElements = messages.map(m => <Message key={m.id} message={m.message} id={m.id}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <DialogsReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React, {ComponentType} from 'react';\r\nimport {\r\n    addMessageAC,\r\n    DialogsType,\r\n    MessagesType\r\n} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect';\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\ntype MapDispatchPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n}\r\ntype OwnPropsType = {\r\n\r\n}\r\nexport type PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType)\r\n    : MapStatePropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:(action: any) => void): MapDispatchPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => dispatch(addMessageAC(newMessageBody)),\r\n    }\r\n}\r\nexport default compose<ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>\r\n    (mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n// const AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n// const DialogsContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>\r\n// (mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n//\r\n// export default DialogsContainer;"],"sourceRoot":""}
{"version":3,"sources":["components/Login/LoginForm/LoginFormWithFormik.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"names":["LoginFormWithFormik","dispatch","useDispatch","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","logIn","resetForm","handleSubmit","getFieldProps","touched","style","color","type","Login","React","memo","isAuth","to","LoginContainer","this","props","Component","compose","connect","state","auth"],"mappings":"6OA6DeA,EAlDoB,WAC/B,IAAMC,EAAWC,cAEXC,EAASC,YAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAAAC,GACN,IAAMC,EAA0B,GAWhC,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAASM,OAAS,IAChCF,EAAOJ,SAAW,gCAFlBI,EAAOJ,SAAW,WAIfI,GAEXG,SAAU,SAAAJ,GACNT,EAASc,YAAML,EAAOJ,MAAOI,EAAOH,SAAUG,EAAOF,aAErDL,EAAOa,eAGf,OACI,uBAAMF,SAAUX,EAAOc,aAAvB,UACI,gCACI,qCAAWd,EAAOe,cAAc,WAC/Bf,EAAOgB,QAAQb,OAASH,EAAOQ,OAAOL,MAAQ,qBAAKc,MAAO,CAACC,MAAO,OAApB,SAA6BlB,EAAOQ,OAAOL,QAAe,QAE7G,gCACI,mCAAOgB,KAAM,YAAgBnB,EAAOe,cAAc,cACjDf,EAAOgB,QAAQZ,UAAYJ,EAAOQ,OAAOJ,SAAW,qBAAKa,MAAO,CAACC,MAAO,OAApB,SAA6BlB,EAAOQ,OAAOJ,WAAkB,QAEtH,gCACI,mCAAOe,KAAM,YAAgBnB,EAAOe,cAAc,gBACjDf,EAAOgB,QAAQX,YAAcL,EAAOQ,OAAOH,WAAa,qBAAKY,MAAO,CAACC,MAAO,OAApB,SAA6BlB,EAAOQ,OAAOH,aAAoB,QAE5H,8BACI,wBAAQc,KAAK,SAAb,yBC5BDC,EAlB6BC,IAAMC,MAAK,YAAqB,EAAnBV,MAOrD,OAPwE,EAAZW,OAQhD,cAAC,IAAD,CAAUC,GAAI,aAEd,gCACJ,uCACA,cAAC,EAAD,U,QCJNC,E,4JAEF,WACI,OACI,cAAC,EAAD,CAAOb,MAAOc,KAAKC,MAAMf,MAAOW,OAAQG,KAAKC,MAAMJ,a,GAJlCF,IAAMO,WAYpBC,sBACXC,aAJoB,SAACC,GAAD,MAA0B,CAACR,OAAQQ,EAAMC,KAAKT,UAI4B,CAC1FX,YAFOiB,CAGbJ","file":"static/js/7.8ef5b31f.chunk.js","sourcesContent":["import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useFormik} from 'formik';\nimport {logIn} from '../../../redux/auth-reducer';\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const LoginFormWithFormik = () => {\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n        },\n        validate: values => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 4) {\n                errors.password = 'Must be 4 characters or more';\n            }\n            return errors\n        },\n        onSubmit: values => {\n            dispatch(logIn(values.email, values.password, values.rememberMe))\n            //зачищаем форму\n            formik.resetForm()\n        }\n    })\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <div>\n                <input {...formik.getFieldProps('email')} />\n                {formik.touched.email && formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\n            </div>\n            <div>\n                <input type={'password'} {...formik.getFieldProps('password')} />\n                {formik.touched.password && formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\n            </div>\n            <div>\n                <input type={'checkbox'} {...formik.getFieldProps('rememberMe')} />\n                {formik.touched.rememberMe && formik.errors.rememberMe ? <div style={{color: 'red'}}>{formik.errors.rememberMe}</div> : null}\n            </div>\n            <div>\n                <button type='submit'>Login</button>\n            </div>\n        </form>\n    )\n}\n\nexport default LoginFormWithFormik\n","import React from 'react';\nimport LoginReduxForm, {LoginFormValuesType} from './LoginForm/LoginForm';\nimport {Redirect} from \"react-router-dom\";\nimport LoginFormWithFormik from \"./LoginForm/LoginFormWithFormik\";\n\nexport  type LoginFormPropsType = {\n    logIn: (email: string | null, password: string | null, rememberMe: boolean) => void\n    isAuth: boolean\n}\nconst Login: React.FC<LoginFormPropsType> = React.memo(({logIn, isAuth}) => {\n\n    // const onSubmit = (formData: LoginFormValuesType) => {\n    //     logIn(formData.email, formData.password, formData.rememberMe)\n        // console.log(formData)\n    // }\n\n    if (isAuth) {\n        return (<Redirect to={'/profile'}/>)\n    } else {\n        return (<div>\n            <h1>Login</h1>\n            <LoginFormWithFormik />\n            {/*<LoginReduxForm onSubmit={onSubmit}/>*/}\n        </div>)\n    }\n})\n\nexport default Login","import React, {ComponentType} from 'react';\nimport {logIn} from '../../redux/auth-reducer';\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport Login from \"./Login\";\nimport {compose} from \"redux\";\n\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {\n    logIn: (email: string | null, password: string | null, rememberMe: boolean) => void\n}\ntype OwnPropsType = {}\nexport  type LoginFormPropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\n\nclass LoginContainer extends React.Component <LoginFormPropsType> {\n\n    render() {\n        return (\n            <Login logIn={this.props.logIn} isAuth={this.props.isAuth} />\n        )\n    }\n}\n\nconst MapStateToProps = (state: AppStateType) => ({isAuth: state.auth.isAuth})\n\n\nexport default compose<ComponentType>(\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(MapStateToProps, {\n        logIn})\n)(LoginContainer)"],"sourceRoot":""}
{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","HOC/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsForm/DialogsFormWithFormik.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","Dialog","id","name","path","className","s","dialog","active","Message","message","DialogsFormWithFormik","dispatch","useDispatch","formik","useFormik","initialValues","messageBody","validate","values","errors","onSubmit","addMessageAC","resetForm","handleSubmit","getFieldProps","touched","style","color","type","Dialogs","dialogs","messages","dialogsElements","addMessage","map","d","messagesElements","m","dialogItems","compose","dialogsPage","newMessageBody"],"mappings":"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","file":"static/js/6.1300b4f4.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux-store\";\n\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {}\ntype OwnProps = {}\n\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType  => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: MapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n            if(!isAuth) return <Redirect to='/login'/>\n            return <Component {...restProps as T} />\n\n    }\n\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, MapDispatchPropsType, OwnProps, AppStateType>\n    (mapStateToPropsForRedirect, {})(RedirectComponent)\n\n    return ConnectedAuthRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogItems\":\"Dialogs_dialogItems__3flRc\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__1323i\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Dialog.module.css';\r\n\r\n\r\ntype PropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst Dialog: React.FC <PropsType> = ({id, name}) => {\r\n    let path = '/dialogs/' + id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport s from './Message.module.css';\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nconst Message: React.FC <MessagePropsType> = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\nimport {useFormik} from 'formik';\nimport {useDispatch} from 'react-redux';\nimport { addMessageAC } from '../../../redux/dialogs-reducer';\n\n\n export const DialogsFormWithFormik = () => {\n     const dispatch = useDispatch()\n    const formik = useFormik({\n        initialValues: {\n            messageBody: '',\n        },\n        validate: values => {\n            const errors: { messageBody?: string } = {};\n            if (values.messageBody.length > 10) {\n                errors.messageBody = 'Must be 10 characters or less';\n            }\n            return errors\n        },\n        onSubmit: values => {\n            dispatch(addMessageAC(values.messageBody))\n            formik.resetForm()\n        }\n    })\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <textarea\n                {...formik.getFieldProps('messageBody')}\n            />\n            {formik.touched.messageBody && formik.errors.messageBody ? <div style={{color: 'red'}}>{formik.errors.messageBody}</div> : null}\n            <div>\n                <button type='submit'>Send message</button>\n            </div>\n        </form>\n    )\n}\n\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Dialog from './Dialog/Dialog';\r\nimport Message from './Message/Message';\r\nimport {DialogsType, MessagesType} from '../../redux/dialogs-reducer';\r\nimport {DialogsFormWithFormik} from \"./DialogsForm/DialogsFormWithFormik\";\r\n\r\n\r\ntype PropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMessageBody: string\r\n    addMessage: (newMessageBody: string) => void\r\n    updateNewMessageBody: (body: string) => void\r\n    isAuth: boolean\r\n}\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    const {dialogs, messages, addMessage} = props\r\n\r\n    const addNewMessage = (values: { newMessageBody: string }) => {\r\n        addMessage(values.newMessageBody)\r\n        values.newMessageBody = ''\r\n    }\r\n    let dialogsElements = dialogs.map(d => <Dialog key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElements = messages.map(m => <Message key={m.id} message={m.message} id={m.id}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <DialogsFormWithFormik/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React, {ComponentType} from 'react';\r\nimport {\r\n    addMessageAC,\r\n    DialogsType,\r\n    MessagesType\r\n} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect';\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\ntype MapDispatchPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n}\r\ntype OwnPropsType = {\r\n\r\n}\r\nexport type PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType)\r\n    : MapStatePropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:(action: any) => void): MapDispatchPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => dispatch(addMessageAC(newMessageBody)),\r\n    }\r\n}\r\nexport default compose<ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>\r\n    (mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n// const AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n// const DialogsContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>\r\n// (mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n//\r\n// export default DialogsContainer;"],"sourceRoot":""}
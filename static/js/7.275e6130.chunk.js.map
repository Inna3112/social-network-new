{"version":3,"sources":["common/FormsControl/FormControl.module.css","common/FormsControl/FormsControl.tsx","utils/validators/validators.ts","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"names":["module","exports","FormControl","meta","children","hasError","error","touched","className","s","formControl","Textarea","props","input","restProps","Input","required","value","undefined","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","validate","type","formSummaryError","Login","React","memo","logIn","isAuth","to","formData","email","password","rememberMe","LoginContainer","this","Component","compose","connect","state","auth"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,iBAAmB,wC,yJCMjHC,EAAmC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SACxCC,EAAWF,EAAKG,OAASH,EAAKI,QAEpC,OACI,sBAAKC,UAAWC,IAAEC,YAAc,KAAML,EAAWI,IAAEH,MAAQ,IAA3D,UACKF,EACAC,GAAY,+BAAOF,EAAKG,YAIxBK,EAAwC,SAACC,GAAW,IACtDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD8C,YACxBS,EADwB,mBAG5D,OAEI,cAACV,EAAD,2BAAiBU,GAAjB,aAAwB,oDAAcC,GAAWC,QAI5CC,EAAqC,SAACH,GAAW,IACnDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD2C,YACrBS,EADqB,mBAGzD,OACI,cAACV,EAAD,2BAAiBU,GAAjB,aAAwB,iDAAWC,GAAWC,S,iCC5BtD,oEAAO,IAAME,EAA+B,SAACC,GACzC,OAAOA,OAAQC,EAAY,qBAGlBC,EAAmB,SAACC,GAAD,OAA2C,SAACH,GACxE,OAAOA,EAAMI,OAASD,EAAf,kCAC0BA,EAD1B,iBAEDF,K,yKC+BKI,EAFQC,YAAmD,CAACC,KAAM,SAA1DD,EAxBoF,SAACX,GACxG,OACI,uBAAMa,SAAUb,EAAMc,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,YAAa,QAASC,KAAM,QAASC,UAAWf,IAChDgB,SAAU,CAACf,SAEtB,8BACI,cAACW,EAAA,EAAD,CAAOC,YAAa,WAAYC,KAAM,WAAYG,KAAM,WACjDF,UAAWf,IAAOgB,SAAU,CAACf,SAExC,gCACI,cAACW,EAAA,EAAD,CAAOK,KAAM,WAAYH,KAAM,aAAcC,UAAWf,IACjDgB,SAAU,CAACf,OAFtB,kBAICJ,EAAMN,OAAS,qBAAKE,UAAWC,IAAEwB,iBAAlB,SACXrB,EAAMN,QAEX,8BACI,mD,OCRD4B,EAjB6BC,IAAMC,MAAK,YAAsB,IAApBC,EAAmB,EAAnBA,MAOrD,OAPwE,EAAZC,OAQhD,cAAC,IAAD,CAAUC,GAAI,aAEd,gCACJ,uCACA,cAAC,EAAD,CAAgBd,SAVP,SAACe,GACdH,EAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,qB,QCMpDC,E,4JAEF,WACI,OACI,cAAC,EAAD,CAAOP,MAAOQ,KAAKjC,MAAMyB,MAAOC,OAAQO,KAAKjC,MAAM0B,a,GAJlCH,IAAMW,WAYpBC,sBACXC,aAJoB,SAACC,GAAD,MAA0B,CAACX,OAAQW,EAAMC,KAAKZ,UAI4B,CAC1FD,YAFOU,CAGbH","file":"static/js/7.275e6130.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__2cVvM\",\"error\":\"FormControl_error__3aqj1\",\"formSummaryError\":\"FormControl_formSummaryError__h13sV\"};","import React from 'react';\nimport s from './FormControl.module.css'\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\n\ntype PropsType = {\n    meta: WrappedFieldMetaProps\n}\nconst FormControl: React.FC<PropsType> = ({ meta, children}) => {\n    const hasError = meta.error && meta.touched\n\n    return (\n        <div className={s.formControl + ' ' +(hasError ? s.error : '')}>\n            {children}\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n\n    return (\n\n        <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n\n    )\n}\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n\n    return (\n        <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n    )\n}","export  type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    return value ? undefined : 'Field is required'\n\n}\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    return value.length > maxLength\n        ? `Max length must be less ${maxLength} symbols`\n        : undefined\n}","import React from 'react';\nimport  {InjectedFormProps, reduxForm, Field} from 'redux-form';\nimport {Input} from '../../../common/FormsControl/FormsControl';\nimport {required} from '../../../utils/validators/validators';\nimport s from '../../../common/FormsControl/FormControl.module.css'\n\ntype LoginFormOwnProps = {\n    // captcha: string | null\n}\nexport type LoginFormValuesType = {\n    email: string | null\n    password: string | null\n    rememberMe: boolean\n}\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={\"Email\"} name={\"email\"} component={Input}\n                       validate={[required]} />\n            </div>\n            <div>\n                <Field placeholder={'Password'} name={'password'} type={'password'}\n                       component={Input} validate={[required]} />\n            </div>\n            <div>\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}\n                       validate={[required]} /> remember me\n            </div>\n            {props.error && <div className={s.formSummaryError}>\n                {props.error}\n            </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\nconst LoginReduxForm = reduxForm<LoginFormValuesType & LoginFormOwnProps>({form: 'login'})(LoginForm)\n\nexport default LoginReduxForm\n","import React from 'react';\nimport LoginReduxForm, {LoginFormValuesType} from './LoginForm/LoginForm';\nimport {Redirect} from \"react-router-dom\";\n\nexport  type LoginFormPropsType = {\n    logIn: (email: string | null, password: string | null, rememberMe: boolean) => void\n    isAuth: boolean\n}\nconst Login: React.FC<LoginFormPropsType> = React.memo(({logIn, isAuth}) => {\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        logIn(formData.email, formData.password, formData.rememberMe)\n        // console.log(formData)\n    }\n\n    if (isAuth) {\n        return (<Redirect to={'/profile'}/>)\n    } else {\n        return (<div>\n            <h1>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>)\n    }\n})\n\nexport default Login","import React, {ComponentType} from 'react';\nimport {logIn} from '../../redux/auth-reducer';\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport Login from \"./Login\";\nimport {compose} from \"redux\";\n\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {\n    logIn: (email: string | null, password: string | null, rememberMe: boolean) => void\n}\ntype OwnPropsType = {}\nexport  type LoginFormPropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\n\nclass LoginContainer extends React.Component <LoginFormPropsType> {\n\n    render() {\n        return (\n            <Login logIn={this.props.logIn} isAuth={this.props.isAuth} />\n        )\n    }\n}\n\nconst MapStateToProps = (state: AppStateType) => ({isAuth: state.auth.isAuth})\n\n\nexport default compose<ComponentType>(\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(MapStateToProps, {\n        logIn})\n)(LoginContainer)"],"sourceRoot":""}